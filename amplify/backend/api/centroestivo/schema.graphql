# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public, provider: iam } } # FOR TESTING ONLY!

type Group @model @auth(
	rules: [
		{ allow: groups, provider: userPools, groups: ["Admins"], operations: [create, update, delete, read] },
		{ allow: groups, provider: userPools, groups: ["Refs"], operations: [create, update, read] },
		{ allow: groups, provider: userPools, groups: ["Users"], operations: [read] },
		{ allow: public, provider: iam, operations: [read] }
		]
	) {
  id: ID!
  name: String!
  color: String!
  teams: [FantaTeam] @manyToMany(relationName: "FantaTeamGroups")
}

type FantaTeam @model @auth(
	rules: [
		{ allow: groups, provider: userPools, groups: ["Admins"], operations: [create, update, delete, read] },
		{ allow: groups, provider: userPools, groups: ["Refs"], operations: [create, update, read] },
		{ allow: groups, provider: userPools, groups: ["Users"], operations: [read] },
		{ allow: public, provider: iam, operations: [read] }
		]
	) {
  id: ID!
  name: String!
  groups: [Group] @manyToMany(relationName: "FantaTeamGroups")
  leaderGroup: Group @hasOne
}

type FantaRule @model @auth(
	rules: [
		{ allow: groups, provider: userPools, groups: ["Admins"], operations: [create, update, delete, read] },
		{ allow: groups, provider: userPools, groups: ["Refs"], operations: [create, update, read] },
		{ allow: groups, provider: userPools, groups: ["Users"], operations: [read] },
		{ allow: public, provider: iam, operations: [read] }
		]
	) {
  id: ID!
  title: String!
  description: String!
  points: Int!
  pointDescription: String!
}

type FantaScoreEntry @model @auth(
	rules: [
		{ allow: groups, provider: userPools, groups: ["Admins"], operations: [create, update, delete, read] },
		{ allow: groups, provider: userPools, groups: ["Refs"], operations: [create, update, read] },
		{ allow: groups, provider: userPools, groups: ["Users"], operations: [read] },
		{ allow: public, provider: iam, operations: [read] }
		]
	) {
  id: ID!
  rule: FantaRule! @hasOne
  group: Group! @hasOne
  date: AWSDateTime!
}